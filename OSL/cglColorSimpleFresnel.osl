/* 
 * CG-Lion Color-Angle-Blend OSL shader written by Oded Erell (c)2020
 *
 * Description:
 * Outputs a blend between 2 color sources according to surface view angle.
 * Parameters:
 * facing_color: The color (or texture) that will appear at perpendicular view angle.
 * side_color: The color (or texture) that will appear at grazing view angle.
 * base_blend: The percent of side_color that is mixed with facing_color at perpendicular view angle.
 * curve_exponent: A power exponent value by which the blend value is raised to control the blend curve.
 * for example, a value of 1.0 will output a linear blend, while a value of 3.0
 * will output a 'slow' curve that shows facing_color at more angles and side_color only at extreme grazing angle.
 *
 * This shader was tested in the following renderers:
 * Cycles for Blender 2.83 (CPU)
 * Arnold 6 for Maya 2020 (CPU)
 * Arnold for 3ds max 2020
 * V-Ray Next for 3ds max 2020 (CPU)
 * Appleseed 2 beta for Blender
 */
 
 #include "stdosl.h"
 
shader cglColorAngleBlend
[[ string help = "Blend colors by view angle" ]]
(
	color facing_color = color(0, 0, 0)
		[[ string help = "The color (or texture) that will appear at perpendicular view angle" ]],
	color side_color = color(1, 1, 1)
		[[ string help = "The color (or texture) that will appear at grazing view angle" ]],
	float IOR = 0.0
		[[ string help = "Dielectric refractive index",
		float min = 1.0, float max = 10.0]],
	output color color_out = color(1, 1, 1))
{
	/* compute fresnel reflectance without explicitly computing the refracted direction */
	float A, B;
	float c = fabs(dot(-I, N));
	float g = IOR * IOR - 1 + c * c;
	float Fr = 1.0;  /* TIR (no refracted component) */

	if (g > 0) {
		g = sqrt(g);
		A = (g - c) / (g + c);
		B = (c * (g + c) - 1) / (c * (g - c) + 1);
		Fr = 0.5 * A * A * (1 + B * B);
    }
	// blend and output the final color:
	color_out = ((facing_color * (1 - Fr)) + (side_color * Fr));
}