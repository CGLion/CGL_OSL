/* 
 * CG-Lion Color-Distance-Blend OSL shader written by Oded Erell (c)2020
 *
 * Description:
 * Outputs a blend between 2 color sources according to surface camera distance.
 * Parameters:
 * near_color: The color (or texture) that will appear at the near distance and closer.
 * far_color: The color (or texture) that will appear at the far distance and farther.
 * near_distance: The distance from camera at which the color blend will begin.
 * far_distance: The distance from camera at which the color blend will end.
 * curve_exponent: A power exponent value by which the blend value is raised to control the blend curve.
 * for example, a value of 1.0 will output a linear blend, while a value of 3.0
 * will output a 'slow' curve that shows facing_color at more angles and side_color only at extreme grazing angle.
 *
 * This shader was tested in the following renderers:
 * Cycles for Blender 2.83 (CPU)
 * Arnold 6 for Maya 2020 (CPU)
 * V-Ray 5 for 3ds max 2020 (CPU)
 */
 
 #include "stdosl.h"
 
shader cglColorDistanceBlend
[[ string help = "Blend colors by view distance" ]]
(
	color near_color = color(0, 0, 0)
		[[ string help = "The color (or texture) that will appear at the near distance and closer" ]],
	color far_color = color(1, 1, 1)
		[[ string help = "The color (or texture) that will appear at the far distance and farther" ]],
	float near_distance = 0.1
		[[ string help = "The distance from camera at which the color blend will begin",
		float min = 0.0, float max = 1000000.0]],
	float far_distance = 1.0
		[[ string help = "The distance from camera at which the color blend will end",
		float min = 0.0, float max = 1000000.0]],
	float curve_exponent = 1.0
		[[ string help = "A power exponent value by which the blend value is raised to control the blend curve",
		float min = 0.001, float max = 10.0]],
	output color color_out = color(1, 1, 1))
{
	// calculate the linear facing ratio:
	float cam_dist = length( P - point("camera",0.0, 0.0, 0.0) );
	float final_blend_ratio = pow( clamp( ( ( cam_dist - near_distance ) / ( far_distance - near_distance ) ), 0.0, 1.0 ), curve_exponent);
	// blend and output the final color:
	color_out = mix( near_color, far_color, final_blend_ratio);
}